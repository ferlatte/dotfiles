#! /usr/bin/osascript -l JavaScript
// -*- mode: JavaScript -*-


// takes a Date and returns the interval in seconds since now.
function timeIntervalSinceNow(d) {
  now = new Date();
  interval = now.getTime() - d.getTime();
  return interval / 1000; // Remember, JavaScript time is milliseconds
}

function daysFromInterval(i) {
  return Math.round(i / 86400)
}

function run(argv) {
  let ofApp = Application("OmniFocus");
  if (! ofApp) {
    console.log("Couldn't find OmniFocus 3");
    return
  }
  ofApp.includeStandardAdditions = true;
  ofApp.strictPropertyScope = true;
  ofApp.strictCommandScope = true;
  ofApp.strictParameterType = true;
  let ofAppAlreadyRunning = ofApp.running();
  let doc = ofApp.defaultDocument();
  projects = doc.flattenedProjects();
  let totalProjects = 0;
  let activeProjects = 0;
  let completedProjects = 0;
  let oldestProjectDate = new Date();
  for (let p of projects) {
    totalProjects += 1;
    if (p.completed()) {
      completedProjects += 1;
    } else {
      activeProjects += 1;
    }
    // singletonActionHolder maps to "Single Action" projects.
    // We use that to indicate if the project should count towards
    // the churn calculation (single action projects are forever so should
    // be excluded).
    if (! p.singletonActionHolder()) {
      if (oldestProjectDate > p.creationDate()) {
        oldestProjectDate = p.creationDate();
      }
    }
  }
  tasks = doc.flattenedTasks()
  let totalTasks = 0
  let activeTasks = 0
  for (let t of tasks) {
    totalTasks += 1;
    if (! t.completed()) {
      activeTasks += 1;
    }
  }
  let now = new Date();
  let interval = timeIntervalSinceNow(oldestProjectDate);
  let intervalDays = daysFromInterval(interval);
  let churn = (completedProjects / intervalDays) * 100;
  console.log("Date,Active Projects,Active Tasks,Churn Rate");
  console.log(now.toLocaleDateString() + ", " + activeProjects + ", "
              + activeTasks + ", " + churn);
    if (! ofAppAlreadyRunning) {
    ofApp.quit();
  }
}
